# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.24.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

  end

  desc "Publish pod"
  lane :release do
    version = ENV["TRAVIS_TAG"]
    
    framework_prefix = "YumiMediation"

    next if version.nil? or version.empty?

    podspec_name = "YumiMediationAdapters"
    podspec_path = "#{podspec_name}.podspec"
    version_bump_podspec(path: podspec_path, version_number: version)

    fastlane_require "aliyun/oss"
    fastlane_require "retries"
    fastlane_require 'fileutils'

    podspec = read_podspec(path: podspec_path)

    Dir.chdir("..") do
      FileUtils.mkdir_p "#{version}"
      subspecs = podspec["subspecs"]
      subspecs = {} if subspecs.nil?
      subspecs.each do |subspec|
        name = subspec["name"]
        subspec_framework = "#{framework_prefix}#{name}"
        subspec_path = "#{subspec_framework}.podspec"

        # generate podspec for packaging
        File.open("#{subspec_path}", "w") do |file|
          file.puts("Pod::Spec.new do |s|")

          values_to_replace = {
            "name" => subspec_framework
          }
          podspec.each do |key, val|
            if key == "dependencies" then
              val.each do |d, vs|
                file.puts("  s.dependency '#{d}', '#{vs[0]}'")
              end
              next
            end

            v = values_to_replace[key]
            val = v unless v.nil?
            file.puts("  s.#{key} = '#{val}'") if val.is_a? String
            file.puts("  s.#{key} = #{val}") if val.is_a? Hash
          end

          subspec.each do |key, val|
            next if key == "name"

            if key == "dependencies" then
              val.each do |d, vs|
                file.puts("  s.dependency '#{d}', '#{vs[0]}'")
              end
              next
            end

            file.puts("  s.#{key} = '#{val}'") if val.is_a? String
            file.puts("  s.#{key} = #{val}") if val.is_a? Hash
          end

          file.puts("end")
        end

        # package
        sh "pod package #{subspec_path} --force --embedded --no-mangle --exclude-deps"

        # move framework
        FileUtils.mv("#{subspec_framework}-#{version}/ios/#{subspec_framework}.embeddedframework", "#{version}/#{subspec_framework}")
      end

      # generate podspec for pubilshing
      source = "#{version}_#{ENV['TRAVIS_BUILD_NUMBER']}.tar.bz2"
      File.open("#{podspec_path}", "w") do |file|
        file.puts("Pod::Spec.new do |s|")

        values_to_replace = {
          "source" => { :http => "http://adsdk.yumimobi.com/iOS/YumiMediationAdapters/#{source}" }
        }

        podspec.each do |key, val|
          if key == "dependencies" then
            val.each do |d, vs|
              file.puts("  s.dependency '#{d}', '#{vs[0]}'")
            end
            next
          end

          v = values_to_replace[key]
          val = v unless v.nil?
          file.puts("  s.#{key} = '#{val}'") if val.is_a? String
          file.puts("  s.#{key} = #{val}") if val.is_a? Hash
        end

        subspecs.each do |subspec|
          name = subspec["name"]
          subspec_framework = "#{framework_prefix}#{name}"
          file.puts "  s.subspec '#{name}' do |sp|"
          file.puts "    sp.ios.vendored_framework = '#{subspec_framework}/#{subspec_framework}.framework'"

          subspec.each do |key, val|
            next if ["name", "source_files"].include? key

            if key == "resource_bundles" then
              file.puts "    sp.resource = '#{subspec_framework}/Resources/#{subspec_framework}.bundle'" 
              next
            end

            if key == "dependencies" then
              val.each do |d, vs|
                file.puts("    sp.dependency '#{d}', '#{vs[0]}'")
              end
              next
            end

            file.puts("  s.#{key} = '#{val}'") if val.is_a? String
            file.puts("  s.#{key} = #{val}") if val.is_a? Hash
          end

          file.puts "  end"
        end

        file.puts("end")
      end

      # compress and upload to oss
      sh "tar cjf #{source} #{version}"
      with_retries(max_tries: 10) do
        Aliyun::OSS::Client.new(
          :endpoint => "http://oss-cn-beijing.aliyuncs.com",
          :access_key_id => ENV["OSS_KEY_ID"],
          :access_key_secret => ENV["OSS_KEY_SECRET"]
        ).
        get_bucket("ad-sdk").
        put_object("iOS/#{podspec_name}/#{source}", :file => source)
      end
    end

    # # pod trunk push
    # with_retries(max_tries: 10) do
    #   pod_push(path: podspec_path, allow_warnings: true)
    # end
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
